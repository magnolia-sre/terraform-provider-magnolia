/*
Subscription Service Endpoints

## Create subscription  Create a new subscription.  ``` curl -v -d '{\\     \"company\": \"My Company\", \\     \"firstName\": \"First\", \\     \"lastName\": \"Last\", \\     \"email\": \"first.last@magnolia-cms.com\", \\     \"password\": \"some1%2Tres\", \\     \"function\": \"CTO\", \\     \"country\": \"Spain\" \\     }' \\ -H \"Content-Type: application/json\" -X POST \"http://localhost:8080/public/subscriptions\" ``` ## Update subscription  Update a new subscription. This is an idempotent operation.  ``` curl -v -d '{\\     \"id\": \"my-company\" \\     }' \\ -H \"Content-Type: application/json\" -X POST \"http://localhost:8080/admin/subscriptions/{subId}\" ``` ## Invite users  Invite a list of users to a subscription.  ## Validate invitation  Validate an invitation to a subscription.  ## Activate user  Activate a user for a subscription. The user needs an invitation to be activated. 

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MetricResponse struct for MetricResponse
type MetricResponse struct {
	Metrics []MetricData `json:"metrics,omitempty"`
	Updated *int64 `json:"updated,omitempty"`
}

// NewMetricResponse instantiates a new MetricResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricResponse() *MetricResponse {
	this := MetricResponse{}
	return &this
}

// NewMetricResponseWithDefaults instantiates a new MetricResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricResponseWithDefaults() *MetricResponse {
	this := MetricResponse{}
	return &this
}

// GetMetrics returns the Metrics field value if set, zero value otherwise.
func (o *MetricResponse) GetMetrics() []MetricData {
	if o == nil || o.Metrics == nil {
		var ret []MetricData
		return ret
	}
	return o.Metrics
}

// GetMetricsOk returns a tuple with the Metrics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricResponse) GetMetricsOk() ([]MetricData, bool) {
	if o == nil || o.Metrics == nil {
		return nil, false
	}
	return o.Metrics, true
}

// HasMetrics returns a boolean if a field has been set.
func (o *MetricResponse) HasMetrics() bool {
	if o != nil && o.Metrics != nil {
		return true
	}

	return false
}

// SetMetrics gets a reference to the given []MetricData and assigns it to the Metrics field.
func (o *MetricResponse) SetMetrics(v []MetricData) {
	o.Metrics = v
}

// GetUpdated returns the Updated field value if set, zero value otherwise.
func (o *MetricResponse) GetUpdated() int64 {
	if o == nil || o.Updated == nil {
		var ret int64
		return ret
	}
	return *o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricResponse) GetUpdatedOk() (*int64, bool) {
	if o == nil || o.Updated == nil {
		return nil, false
	}
	return o.Updated, true
}

// HasUpdated returns a boolean if a field has been set.
func (o *MetricResponse) HasUpdated() bool {
	if o != nil && o.Updated != nil {
		return true
	}

	return false
}

// SetUpdated gets a reference to the given int64 and assigns it to the Updated field.
func (o *MetricResponse) SetUpdated(v int64) {
	o.Updated = &v
}

func (o MetricResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Metrics != nil {
		toSerialize["metrics"] = o.Metrics
	}
	if o.Updated != nil {
		toSerialize["updated"] = o.Updated
	}
	return json.Marshal(toSerialize)
}

type NullableMetricResponse struct {
	value *MetricResponse
	isSet bool
}

func (v NullableMetricResponse) Get() *MetricResponse {
	return v.value
}

func (v *NullableMetricResponse) Set(val *MetricResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricResponse(val *MetricResponse) *NullableMetricResponse {
	return &NullableMetricResponse{value: val, isSet: true}
}

func (v NullableMetricResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


