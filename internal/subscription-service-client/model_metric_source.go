/*
Subscription Service Endpoints

## Create subscription  Create a new subscription.  ``` curl -v -d '{\\     \"company\": \"My Company\", \\     \"firstName\": \"First\", \\     \"lastName\": \"Last\", \\     \"email\": \"first.last@magnolia-cms.com\", \\     \"password\": \"some1%2Tres\", \\     \"function\": \"CTO\", \\     \"country\": \"Spain\" \\     }' \\ -H \"Content-Type: application/json\" -X POST \"http://localhost:8080/public/subscriptions\" ``` ## Update subscription  Update a new subscription. This is an idempotent operation.  ``` curl -v -d '{\\     \"id\": \"my-company\" \\     }' \\ -H \"Content-Type: application/json\" -X POST \"http://localhost:8080/admin/subscriptions/{subId}\" ``` ## Invite users  Invite a list of users to a subscription.  ## Validate invitation  Validate an invitation to a subscription.  ## Activate user  Activate a user for a subscription. The user needs an invitation to be activated. 

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MetricSource the model 'MetricSource'
type MetricSource string

// List of MetricSource
const (
	AUTOGENERATED MetricSource = "AUTOGENERATED"
	MAGNOLIA MetricSource = "MAGNOLIA"
	ENDPOINT MetricSource = "ENDPOINT"
)

// All allowed values of MetricSource enum
var AllowedMetricSourceEnumValues = []MetricSource{
	"AUTOGENERATED",
	"MAGNOLIA",
	"ENDPOINT",
}

func (v *MetricSource) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MetricSource(value)
	for _, existing := range AllowedMetricSourceEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MetricSource", value)
}

// NewMetricSourceFromValue returns a pointer to a valid MetricSource
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMetricSourceFromValue(v string) (*MetricSource, error) {
	ev := MetricSource(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MetricSource: valid values are %v", v, AllowedMetricSourceEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MetricSource) IsValid() bool {
	for _, existing := range AllowedMetricSourceEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MetricSource value
func (v MetricSource) Ptr() *MetricSource {
	return &v
}

type NullableMetricSource struct {
	value *MetricSource
	isSet bool
}

func (v NullableMetricSource) Get() *MetricSource {
	return v.value
}

func (v *NullableMetricSource) Set(val *MetricSource) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricSource) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricSource(val *MetricSource) *NullableMetricSource {
	return &NullableMetricSource{value: val, isSet: true}
}

func (v NullableMetricSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

