/*
Subscription Service Endpoints

## Create subscription  Create a new subscription.  ``` curl -v -d '{\\     \"company\": \"My Company\", \\     \"firstName\": \"First\", \\     \"lastName\": \"Last\", \\     \"email\": \"first.last@magnolia-cms.com\", \\     \"password\": \"some1%2Tres\", \\     \"function\": \"CTO\", \\     \"country\": \"Spain\" \\     }' \\ -H \"Content-Type: application/json\" -X POST \"http://localhost:8080/public/subscriptions\" ``` ## Update subscription  Update a new subscription. This is an idempotent operation.  ``` curl -v -d '{\\     \"id\": \"my-company\" \\     }' \\ -H \"Content-Type: application/json\" -X POST \"http://localhost:8080/admin/subscriptions/{subId}\" ``` ## Invite users  Invite a list of users to a subscription.  ## Validate invitation  Validate an invitation to a subscription.  ## Activate user  Activate a user for a subscription. The user needs an invitation to be activated. 

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PasswordChangeRequest struct for PasswordChangeRequest
type PasswordChangeRequest struct {
	Strict *string `json:"strict,omitempty"`
	OldPassword *string `json:"oldPassword,omitempty"`
	NewPassword *string `json:"newPassword,omitempty"`
}

// NewPasswordChangeRequest instantiates a new PasswordChangeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPasswordChangeRequest() *PasswordChangeRequest {
	this := PasswordChangeRequest{}
	return &this
}

// NewPasswordChangeRequestWithDefaults instantiates a new PasswordChangeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPasswordChangeRequestWithDefaults() *PasswordChangeRequest {
	this := PasswordChangeRequest{}
	return &this
}

// GetStrict returns the Strict field value if set, zero value otherwise.
func (o *PasswordChangeRequest) GetStrict() string {
	if o == nil || o.Strict == nil {
		var ret string
		return ret
	}
	return *o.Strict
}

// GetStrictOk returns a tuple with the Strict field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordChangeRequest) GetStrictOk() (*string, bool) {
	if o == nil || o.Strict == nil {
		return nil, false
	}
	return o.Strict, true
}

// HasStrict returns a boolean if a field has been set.
func (o *PasswordChangeRequest) HasStrict() bool {
	if o != nil && o.Strict != nil {
		return true
	}

	return false
}

// SetStrict gets a reference to the given string and assigns it to the Strict field.
func (o *PasswordChangeRequest) SetStrict(v string) {
	o.Strict = &v
}

// GetOldPassword returns the OldPassword field value if set, zero value otherwise.
func (o *PasswordChangeRequest) GetOldPassword() string {
	if o == nil || o.OldPassword == nil {
		var ret string
		return ret
	}
	return *o.OldPassword
}

// GetOldPasswordOk returns a tuple with the OldPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordChangeRequest) GetOldPasswordOk() (*string, bool) {
	if o == nil || o.OldPassword == nil {
		return nil, false
	}
	return o.OldPassword, true
}

// HasOldPassword returns a boolean if a field has been set.
func (o *PasswordChangeRequest) HasOldPassword() bool {
	if o != nil && o.OldPassword != nil {
		return true
	}

	return false
}

// SetOldPassword gets a reference to the given string and assigns it to the OldPassword field.
func (o *PasswordChangeRequest) SetOldPassword(v string) {
	o.OldPassword = &v
}

// GetNewPassword returns the NewPassword field value if set, zero value otherwise.
func (o *PasswordChangeRequest) GetNewPassword() string {
	if o == nil || o.NewPassword == nil {
		var ret string
		return ret
	}
	return *o.NewPassword
}

// GetNewPasswordOk returns a tuple with the NewPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordChangeRequest) GetNewPasswordOk() (*string, bool) {
	if o == nil || o.NewPassword == nil {
		return nil, false
	}
	return o.NewPassword, true
}

// HasNewPassword returns a boolean if a field has been set.
func (o *PasswordChangeRequest) HasNewPassword() bool {
	if o != nil && o.NewPassword != nil {
		return true
	}

	return false
}

// SetNewPassword gets a reference to the given string and assigns it to the NewPassword field.
func (o *PasswordChangeRequest) SetNewPassword(v string) {
	o.NewPassword = &v
}

func (o PasswordChangeRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Strict != nil {
		toSerialize["strict"] = o.Strict
	}
	if o.OldPassword != nil {
		toSerialize["oldPassword"] = o.OldPassword
	}
	if o.NewPassword != nil {
		toSerialize["newPassword"] = o.NewPassword
	}
	return json.Marshal(toSerialize)
}

type NullablePasswordChangeRequest struct {
	value *PasswordChangeRequest
	isSet bool
}

func (v NullablePasswordChangeRequest) Get() *PasswordChangeRequest {
	return v.value
}

func (v *NullablePasswordChangeRequest) Set(val *PasswordChangeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePasswordChangeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePasswordChangeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePasswordChangeRequest(val *PasswordChangeRequest) *NullablePasswordChangeRequest {
	return &NullablePasswordChangeRequest{value: val, isSet: true}
}

func (v NullablePasswordChangeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePasswordChangeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


