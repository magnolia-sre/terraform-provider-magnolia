/*
Subscription Service Endpoints

## Create subscription  Create a new subscription.  ``` curl -v -d '{\\     \"company\": \"My Company\", \\     \"firstName\": \"First\", \\     \"lastName\": \"Last\", \\     \"email\": \"first.last@magnolia-cms.com\", \\     \"password\": \"some1%2Tres\", \\     \"function\": \"CTO\", \\     \"country\": \"Spain\" \\     }' \\ -H \"Content-Type: application/json\" -X POST \"http://localhost:8080/public/subscriptions\" ``` ## Update subscription  Update a new subscription. This is an idempotent operation.  ``` curl -v -d '{\\     \"id\": \"my-company\" \\     }' \\ -H \"Content-Type: application/json\" -X POST \"http://localhost:8080/admin/subscriptions/{subId}\" ``` ## Invite users  Invite a list of users to a subscription.  ## Validate invitation  Validate an invitation to a subscription.  ## Activate user  Activate a user for a subscription. The user needs an invitation to be activated. 

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PlanHardLimitValidatorResponse struct for PlanHardLimitValidatorResponse
type PlanHardLimitValidatorResponse struct {
	Proceed *bool `json:"proceed,omitempty"`
	CurrentValue *float64 `json:"currentValue,omitempty"`
	Limit *int32 `json:"limit,omitempty"`
	Constraint *string `json:"constraint,omitempty"`
	Plan *string `json:"plan,omitempty"`
	Name *string `json:"name,omitempty"`
}

// NewPlanHardLimitValidatorResponse instantiates a new PlanHardLimitValidatorResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlanHardLimitValidatorResponse() *PlanHardLimitValidatorResponse {
	this := PlanHardLimitValidatorResponse{}
	return &this
}

// NewPlanHardLimitValidatorResponseWithDefaults instantiates a new PlanHardLimitValidatorResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlanHardLimitValidatorResponseWithDefaults() *PlanHardLimitValidatorResponse {
	this := PlanHardLimitValidatorResponse{}
	return &this
}

// GetProceed returns the Proceed field value if set, zero value otherwise.
func (o *PlanHardLimitValidatorResponse) GetProceed() bool {
	if o == nil || o.Proceed == nil {
		var ret bool
		return ret
	}
	return *o.Proceed
}

// GetProceedOk returns a tuple with the Proceed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanHardLimitValidatorResponse) GetProceedOk() (*bool, bool) {
	if o == nil || o.Proceed == nil {
		return nil, false
	}
	return o.Proceed, true
}

// HasProceed returns a boolean if a field has been set.
func (o *PlanHardLimitValidatorResponse) HasProceed() bool {
	if o != nil && o.Proceed != nil {
		return true
	}

	return false
}

// SetProceed gets a reference to the given bool and assigns it to the Proceed field.
func (o *PlanHardLimitValidatorResponse) SetProceed(v bool) {
	o.Proceed = &v
}

// GetCurrentValue returns the CurrentValue field value if set, zero value otherwise.
func (o *PlanHardLimitValidatorResponse) GetCurrentValue() float64 {
	if o == nil || o.CurrentValue == nil {
		var ret float64
		return ret
	}
	return *o.CurrentValue
}

// GetCurrentValueOk returns a tuple with the CurrentValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanHardLimitValidatorResponse) GetCurrentValueOk() (*float64, bool) {
	if o == nil || o.CurrentValue == nil {
		return nil, false
	}
	return o.CurrentValue, true
}

// HasCurrentValue returns a boolean if a field has been set.
func (o *PlanHardLimitValidatorResponse) HasCurrentValue() bool {
	if o != nil && o.CurrentValue != nil {
		return true
	}

	return false
}

// SetCurrentValue gets a reference to the given float64 and assigns it to the CurrentValue field.
func (o *PlanHardLimitValidatorResponse) SetCurrentValue(v float64) {
	o.CurrentValue = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *PlanHardLimitValidatorResponse) GetLimit() int32 {
	if o == nil || o.Limit == nil {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanHardLimitValidatorResponse) GetLimitOk() (*int32, bool) {
	if o == nil || o.Limit == nil {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *PlanHardLimitValidatorResponse) HasLimit() bool {
	if o != nil && o.Limit != nil {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *PlanHardLimitValidatorResponse) SetLimit(v int32) {
	o.Limit = &v
}

// GetConstraint returns the Constraint field value if set, zero value otherwise.
func (o *PlanHardLimitValidatorResponse) GetConstraint() string {
	if o == nil || o.Constraint == nil {
		var ret string
		return ret
	}
	return *o.Constraint
}

// GetConstraintOk returns a tuple with the Constraint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanHardLimitValidatorResponse) GetConstraintOk() (*string, bool) {
	if o == nil || o.Constraint == nil {
		return nil, false
	}
	return o.Constraint, true
}

// HasConstraint returns a boolean if a field has been set.
func (o *PlanHardLimitValidatorResponse) HasConstraint() bool {
	if o != nil && o.Constraint != nil {
		return true
	}

	return false
}

// SetConstraint gets a reference to the given string and assigns it to the Constraint field.
func (o *PlanHardLimitValidatorResponse) SetConstraint(v string) {
	o.Constraint = &v
}

// GetPlan returns the Plan field value if set, zero value otherwise.
func (o *PlanHardLimitValidatorResponse) GetPlan() string {
	if o == nil || o.Plan == nil {
		var ret string
		return ret
	}
	return *o.Plan
}

// GetPlanOk returns a tuple with the Plan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanHardLimitValidatorResponse) GetPlanOk() (*string, bool) {
	if o == nil || o.Plan == nil {
		return nil, false
	}
	return o.Plan, true
}

// HasPlan returns a boolean if a field has been set.
func (o *PlanHardLimitValidatorResponse) HasPlan() bool {
	if o != nil && o.Plan != nil {
		return true
	}

	return false
}

// SetPlan gets a reference to the given string and assigns it to the Plan field.
func (o *PlanHardLimitValidatorResponse) SetPlan(v string) {
	o.Plan = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PlanHardLimitValidatorResponse) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanHardLimitValidatorResponse) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PlanHardLimitValidatorResponse) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PlanHardLimitValidatorResponse) SetName(v string) {
	o.Name = &v
}

func (o PlanHardLimitValidatorResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Proceed != nil {
		toSerialize["proceed"] = o.Proceed
	}
	if o.CurrentValue != nil {
		toSerialize["currentValue"] = o.CurrentValue
	}
	if o.Limit != nil {
		toSerialize["limit"] = o.Limit
	}
	if o.Constraint != nil {
		toSerialize["constraint"] = o.Constraint
	}
	if o.Plan != nil {
		toSerialize["plan"] = o.Plan
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullablePlanHardLimitValidatorResponse struct {
	value *PlanHardLimitValidatorResponse
	isSet bool
}

func (v NullablePlanHardLimitValidatorResponse) Get() *PlanHardLimitValidatorResponse {
	return v.value
}

func (v *NullablePlanHardLimitValidatorResponse) Set(val *PlanHardLimitValidatorResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePlanHardLimitValidatorResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePlanHardLimitValidatorResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlanHardLimitValidatorResponse(val *PlanHardLimitValidatorResponse) *NullablePlanHardLimitValidatorResponse {
	return &NullablePlanHardLimitValidatorResponse{value: val, isSet: true}
}

func (v NullablePlanHardLimitValidatorResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlanHardLimitValidatorResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


