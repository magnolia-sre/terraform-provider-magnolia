/*
Subscription Service Endpoints

## Create subscription  Create a new subscription.  ``` curl -v -d '{\\     \"company\": \"My Company\", \\     \"firstName\": \"First\", \\     \"lastName\": \"Last\", \\     \"email\": \"first.last@magnolia-cms.com\", \\     \"password\": \"some1%2Tres\", \\     \"function\": \"CTO\", \\     \"country\": \"Spain\" \\     }' \\ -H \"Content-Type: application/json\" -X POST \"http://localhost:8080/public/subscriptions\" ``` ## Update subscription  Update a new subscription. This is an idempotent operation.  ``` curl -v -d '{\\     \"id\": \"my-company\" \\     }' \\ -H \"Content-Type: application/json\" -X POST \"http://localhost:8080/admin/subscriptions/{subId}\" ``` ## Invite users  Invite a list of users to a subscription.  ## Validate invitation  Validate an invitation to a subscription.  ## Activate user  Activate a user for a subscription. The user needs an invitation to be activated. 

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UpdateGitConfigurationRequest struct for UpdateGitConfigurationRequest
type UpdateGitConfigurationRequest struct {
	GitCloneUrl string `json:"gitCloneUrl"`
	GitProvider GitProvider `json:"gitProvider"`
}

// NewUpdateGitConfigurationRequest instantiates a new UpdateGitConfigurationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateGitConfigurationRequest(gitCloneUrl string, gitProvider GitProvider) *UpdateGitConfigurationRequest {
	this := UpdateGitConfigurationRequest{}
	this.GitCloneUrl = gitCloneUrl
	this.GitProvider = gitProvider
	return &this
}

// NewUpdateGitConfigurationRequestWithDefaults instantiates a new UpdateGitConfigurationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateGitConfigurationRequestWithDefaults() *UpdateGitConfigurationRequest {
	this := UpdateGitConfigurationRequest{}
	return &this
}

// GetGitCloneUrl returns the GitCloneUrl field value
func (o *UpdateGitConfigurationRequest) GetGitCloneUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GitCloneUrl
}

// GetGitCloneUrlOk returns a tuple with the GitCloneUrl field value
// and a boolean to check if the value has been set.
func (o *UpdateGitConfigurationRequest) GetGitCloneUrlOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.GitCloneUrl, true
}

// SetGitCloneUrl sets field value
func (o *UpdateGitConfigurationRequest) SetGitCloneUrl(v string) {
	o.GitCloneUrl = v
}

// GetGitProvider returns the GitProvider field value
func (o *UpdateGitConfigurationRequest) GetGitProvider() GitProvider {
	if o == nil {
		var ret GitProvider
		return ret
	}

	return o.GitProvider
}

// GetGitProviderOk returns a tuple with the GitProvider field value
// and a boolean to check if the value has been set.
func (o *UpdateGitConfigurationRequest) GetGitProviderOk() (*GitProvider, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.GitProvider, true
}

// SetGitProvider sets field value
func (o *UpdateGitConfigurationRequest) SetGitProvider(v GitProvider) {
	o.GitProvider = v
}

func (o UpdateGitConfigurationRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["gitCloneUrl"] = o.GitCloneUrl
	}
	if true {
		toSerialize["gitProvider"] = o.GitProvider
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateGitConfigurationRequest struct {
	value *UpdateGitConfigurationRequest
	isSet bool
}

func (v NullableUpdateGitConfigurationRequest) Get() *UpdateGitConfigurationRequest {
	return v.value
}

func (v *NullableUpdateGitConfigurationRequest) Set(val *UpdateGitConfigurationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateGitConfigurationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateGitConfigurationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateGitConfigurationRequest(val *UpdateGitConfigurationRequest) *NullableUpdateGitConfigurationRequest {
	return &NullableUpdateGitConfigurationRequest{value: val, isSet: true}
}

func (v NullableUpdateGitConfigurationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateGitConfigurationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


