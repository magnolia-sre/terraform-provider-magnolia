/*
Subscription Service Endpoints

## Create subscription  Create a new subscription.  ``` curl -v -d '{\\     \"company\": \"My Company\", \\     \"firstName\": \"First\", \\     \"lastName\": \"Last\", \\     \"email\": \"first.last@magnolia-cms.com\", \\     \"password\": \"some1%2Tres\", \\     \"function\": \"CTO\", \\     \"country\": \"Spain\" \\     }' \\ -H \"Content-Type: application/json\" -X POST \"http://localhost:8080/public/subscriptions\" ``` ## Update subscription  Update a new subscription. This is an idempotent operation.  ``` curl -v -d '{\\     \"id\": \"my-company\" \\     }' \\ -H \"Content-Type: application/json\" -X POST \"http://localhost:8080/admin/subscriptions/{subId}\" ``` ## Invite users  Invite a list of users to a subscription.  ## Validate invitation  Validate an invitation to a subscription.  ## Activate user  Activate a user for a subscription. The user needs an invitation to be activated. 

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MetricConstraint Metric Constraint 
type MetricConstraint struct {
	MetricId *string `json:"metricId,omitempty"`
	Type *string `json:"type,omitempty"`
	Limit *int32 `json:"limit,omitempty"`
}

// NewMetricConstraint instantiates a new MetricConstraint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricConstraint() *MetricConstraint {
	this := MetricConstraint{}
	return &this
}

// NewMetricConstraintWithDefaults instantiates a new MetricConstraint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricConstraintWithDefaults() *MetricConstraint {
	this := MetricConstraint{}
	return &this
}

// GetMetricId returns the MetricId field value if set, zero value otherwise.
func (o *MetricConstraint) GetMetricId() string {
	if o == nil || o.MetricId == nil {
		var ret string
		return ret
	}
	return *o.MetricId
}

// GetMetricIdOk returns a tuple with the MetricId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricConstraint) GetMetricIdOk() (*string, bool) {
	if o == nil || o.MetricId == nil {
		return nil, false
	}
	return o.MetricId, true
}

// HasMetricId returns a boolean if a field has been set.
func (o *MetricConstraint) HasMetricId() bool {
	if o != nil && o.MetricId != nil {
		return true
	}

	return false
}

// SetMetricId gets a reference to the given string and assigns it to the MetricId field.
func (o *MetricConstraint) SetMetricId(v string) {
	o.MetricId = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *MetricConstraint) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricConstraint) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *MetricConstraint) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *MetricConstraint) SetType(v string) {
	o.Type = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *MetricConstraint) GetLimit() int32 {
	if o == nil || o.Limit == nil {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricConstraint) GetLimitOk() (*int32, bool) {
	if o == nil || o.Limit == nil {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *MetricConstraint) HasLimit() bool {
	if o != nil && o.Limit != nil {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *MetricConstraint) SetLimit(v int32) {
	o.Limit = &v
}

func (o MetricConstraint) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MetricId != nil {
		toSerialize["metricId"] = o.MetricId
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Limit != nil {
		toSerialize["limit"] = o.Limit
	}
	return json.Marshal(toSerialize)
}

type NullableMetricConstraint struct {
	value *MetricConstraint
	isSet bool
}

func (v NullableMetricConstraint) Get() *MetricConstraint {
	return v.value
}

func (v *NullableMetricConstraint) Set(val *MetricConstraint) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricConstraint) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricConstraint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricConstraint(val *MetricConstraint) *NullableMetricConstraint {
	return &NullableMetricConstraint{value: val, isSet: true}
}

func (v NullableMetricConstraint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricConstraint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


