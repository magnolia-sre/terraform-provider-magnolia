/*
Subscription Service Endpoints

## Create subscription  Create a new subscription.  ``` curl -v -d '{\\     \"company\": \"My Company\", \\     \"firstName\": \"First\", \\     \"lastName\": \"Last\", \\     \"email\": \"first.last@magnolia-cms.com\", \\     \"password\": \"some1%2Tres\", \\     \"function\": \"CTO\", \\     \"country\": \"Spain\" \\     }' \\ -H \"Content-Type: application/json\" -X POST \"http://localhost:8080/public/subscriptions\" ``` ## Update subscription  Update a new subscription. This is an idempotent operation.  ``` curl -v -d '{\\     \"id\": \"my-company\" \\     }' \\ -H \"Content-Type: application/json\" -X POST \"http://localhost:8080/admin/subscriptions/{subId}\" ``` ## Invite users  Invite a list of users to a subscription.  ## Validate invitation  Validate an invitation to a subscription.  ## Activate user  Activate a user for a subscription. The user needs an invitation to be activated. 

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// GitConfigurationResponse struct for GitConfigurationResponse
type GitConfigurationResponse struct {
	PublicKey *string `json:"publicKey,omitempty"`
	GitSecret *string `json:"gitSecret,omitempty"`
	WebhookUrl *string `json:"webhookUrl,omitempty"`
	GitCloneUrl *string `json:"gitCloneUrl,omitempty"`
	GitProvider *GitProvider `json:"gitProvider,omitempty"`
}

// NewGitConfigurationResponse instantiates a new GitConfigurationResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGitConfigurationResponse() *GitConfigurationResponse {
	this := GitConfigurationResponse{}
	return &this
}

// NewGitConfigurationResponseWithDefaults instantiates a new GitConfigurationResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGitConfigurationResponseWithDefaults() *GitConfigurationResponse {
	this := GitConfigurationResponse{}
	return &this
}

// GetPublicKey returns the PublicKey field value if set, zero value otherwise.
func (o *GitConfigurationResponse) GetPublicKey() string {
	if o == nil || o.PublicKey == nil {
		var ret string
		return ret
	}
	return *o.PublicKey
}

// GetPublicKeyOk returns a tuple with the PublicKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitConfigurationResponse) GetPublicKeyOk() (*string, bool) {
	if o == nil || o.PublicKey == nil {
		return nil, false
	}
	return o.PublicKey, true
}

// HasPublicKey returns a boolean if a field has been set.
func (o *GitConfigurationResponse) HasPublicKey() bool {
	if o != nil && o.PublicKey != nil {
		return true
	}

	return false
}

// SetPublicKey gets a reference to the given string and assigns it to the PublicKey field.
func (o *GitConfigurationResponse) SetPublicKey(v string) {
	o.PublicKey = &v
}

// GetGitSecret returns the GitSecret field value if set, zero value otherwise.
func (o *GitConfigurationResponse) GetGitSecret() string {
	if o == nil || o.GitSecret == nil {
		var ret string
		return ret
	}
	return *o.GitSecret
}

// GetGitSecretOk returns a tuple with the GitSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitConfigurationResponse) GetGitSecretOk() (*string, bool) {
	if o == nil || o.GitSecret == nil {
		return nil, false
	}
	return o.GitSecret, true
}

// HasGitSecret returns a boolean if a field has been set.
func (o *GitConfigurationResponse) HasGitSecret() bool {
	if o != nil && o.GitSecret != nil {
		return true
	}

	return false
}

// SetGitSecret gets a reference to the given string and assigns it to the GitSecret field.
func (o *GitConfigurationResponse) SetGitSecret(v string) {
	o.GitSecret = &v
}

// GetWebhookUrl returns the WebhookUrl field value if set, zero value otherwise.
func (o *GitConfigurationResponse) GetWebhookUrl() string {
	if o == nil || o.WebhookUrl == nil {
		var ret string
		return ret
	}
	return *o.WebhookUrl
}

// GetWebhookUrlOk returns a tuple with the WebhookUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitConfigurationResponse) GetWebhookUrlOk() (*string, bool) {
	if o == nil || o.WebhookUrl == nil {
		return nil, false
	}
	return o.WebhookUrl, true
}

// HasWebhookUrl returns a boolean if a field has been set.
func (o *GitConfigurationResponse) HasWebhookUrl() bool {
	if o != nil && o.WebhookUrl != nil {
		return true
	}

	return false
}

// SetWebhookUrl gets a reference to the given string and assigns it to the WebhookUrl field.
func (o *GitConfigurationResponse) SetWebhookUrl(v string) {
	o.WebhookUrl = &v
}

// GetGitCloneUrl returns the GitCloneUrl field value if set, zero value otherwise.
func (o *GitConfigurationResponse) GetGitCloneUrl() string {
	if o == nil || o.GitCloneUrl == nil {
		var ret string
		return ret
	}
	return *o.GitCloneUrl
}

// GetGitCloneUrlOk returns a tuple with the GitCloneUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitConfigurationResponse) GetGitCloneUrlOk() (*string, bool) {
	if o == nil || o.GitCloneUrl == nil {
		return nil, false
	}
	return o.GitCloneUrl, true
}

// HasGitCloneUrl returns a boolean if a field has been set.
func (o *GitConfigurationResponse) HasGitCloneUrl() bool {
	if o != nil && o.GitCloneUrl != nil {
		return true
	}

	return false
}

// SetGitCloneUrl gets a reference to the given string and assigns it to the GitCloneUrl field.
func (o *GitConfigurationResponse) SetGitCloneUrl(v string) {
	o.GitCloneUrl = &v
}

// GetGitProvider returns the GitProvider field value if set, zero value otherwise.
func (o *GitConfigurationResponse) GetGitProvider() GitProvider {
	if o == nil || o.GitProvider == nil {
		var ret GitProvider
		return ret
	}
	return *o.GitProvider
}

// GetGitProviderOk returns a tuple with the GitProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitConfigurationResponse) GetGitProviderOk() (*GitProvider, bool) {
	if o == nil || o.GitProvider == nil {
		return nil, false
	}
	return o.GitProvider, true
}

// HasGitProvider returns a boolean if a field has been set.
func (o *GitConfigurationResponse) HasGitProvider() bool {
	if o != nil && o.GitProvider != nil {
		return true
	}

	return false
}

// SetGitProvider gets a reference to the given GitProvider and assigns it to the GitProvider field.
func (o *GitConfigurationResponse) SetGitProvider(v GitProvider) {
	o.GitProvider = &v
}

func (o GitConfigurationResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PublicKey != nil {
		toSerialize["publicKey"] = o.PublicKey
	}
	if o.GitSecret != nil {
		toSerialize["gitSecret"] = o.GitSecret
	}
	if o.WebhookUrl != nil {
		toSerialize["webhookUrl"] = o.WebhookUrl
	}
	if o.GitCloneUrl != nil {
		toSerialize["gitCloneUrl"] = o.GitCloneUrl
	}
	if o.GitProvider != nil {
		toSerialize["gitProvider"] = o.GitProvider
	}
	return json.Marshal(toSerialize)
}

type NullableGitConfigurationResponse struct {
	value *GitConfigurationResponse
	isSet bool
}

func (v NullableGitConfigurationResponse) Get() *GitConfigurationResponse {
	return v.value
}

func (v *NullableGitConfigurationResponse) Set(val *GitConfigurationResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGitConfigurationResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGitConfigurationResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGitConfigurationResponse(val *GitConfigurationResponse) *NullableGitConfigurationResponse {
	return &NullableGitConfigurationResponse{value: val, isSet: true}
}

func (v NullableGitConfigurationResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGitConfigurationResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


