/*
Subscription Service Endpoints

## Create subscription  Create a new subscription.  ``` curl -v -d '{\\     \"company\": \"My Company\", \\     \"firstName\": \"First\", \\     \"lastName\": \"Last\", \\     \"email\": \"first.last@magnolia-cms.com\", \\     \"password\": \"some1%2Tres\", \\     \"function\": \"CTO\", \\     \"country\": \"Spain\" \\     }' \\ -H \"Content-Type: application/json\" -X POST \"http://localhost:8080/public/subscriptions\" ``` ## Update subscription  Update a new subscription. This is an idempotent operation.  ``` curl -v -d '{\\     \"id\": \"my-company\" \\     }' \\ -H \"Content-Type: application/json\" -X POST \"http://localhost:8080/admin/subscriptions/{subId}\" ``` ## Invite users  Invite a list of users to a subscription.  ## Validate invitation  Validate an invitation to a subscription.  ## Activate user  Activate a user for a subscription. The user needs an invitation to be activated. 

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// GitConfigurationData struct for GitConfigurationData
type GitConfigurationData struct {
	GitSecret *string `json:"gitSecret,omitempty"`
	GitCloneUrl *string `json:"gitCloneUrl,omitempty"`
	Provider *GitProvider `json:"provider,omitempty"`
}

// NewGitConfigurationData instantiates a new GitConfigurationData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGitConfigurationData() *GitConfigurationData {
	this := GitConfigurationData{}
	return &this
}

// NewGitConfigurationDataWithDefaults instantiates a new GitConfigurationData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGitConfigurationDataWithDefaults() *GitConfigurationData {
	this := GitConfigurationData{}
	return &this
}

// GetGitSecret returns the GitSecret field value if set, zero value otherwise.
func (o *GitConfigurationData) GetGitSecret() string {
	if o == nil || o.GitSecret == nil {
		var ret string
		return ret
	}
	return *o.GitSecret
}

// GetGitSecretOk returns a tuple with the GitSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitConfigurationData) GetGitSecretOk() (*string, bool) {
	if o == nil || o.GitSecret == nil {
		return nil, false
	}
	return o.GitSecret, true
}

// HasGitSecret returns a boolean if a field has been set.
func (o *GitConfigurationData) HasGitSecret() bool {
	if o != nil && o.GitSecret != nil {
		return true
	}

	return false
}

// SetGitSecret gets a reference to the given string and assigns it to the GitSecret field.
func (o *GitConfigurationData) SetGitSecret(v string) {
	o.GitSecret = &v
}

// GetGitCloneUrl returns the GitCloneUrl field value if set, zero value otherwise.
func (o *GitConfigurationData) GetGitCloneUrl() string {
	if o == nil || o.GitCloneUrl == nil {
		var ret string
		return ret
	}
	return *o.GitCloneUrl
}

// GetGitCloneUrlOk returns a tuple with the GitCloneUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitConfigurationData) GetGitCloneUrlOk() (*string, bool) {
	if o == nil || o.GitCloneUrl == nil {
		return nil, false
	}
	return o.GitCloneUrl, true
}

// HasGitCloneUrl returns a boolean if a field has been set.
func (o *GitConfigurationData) HasGitCloneUrl() bool {
	if o != nil && o.GitCloneUrl != nil {
		return true
	}

	return false
}

// SetGitCloneUrl gets a reference to the given string and assigns it to the GitCloneUrl field.
func (o *GitConfigurationData) SetGitCloneUrl(v string) {
	o.GitCloneUrl = &v
}

// GetProvider returns the Provider field value if set, zero value otherwise.
func (o *GitConfigurationData) GetProvider() GitProvider {
	if o == nil || o.Provider == nil {
		var ret GitProvider
		return ret
	}
	return *o.Provider
}

// GetProviderOk returns a tuple with the Provider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitConfigurationData) GetProviderOk() (*GitProvider, bool) {
	if o == nil || o.Provider == nil {
		return nil, false
	}
	return o.Provider, true
}

// HasProvider returns a boolean if a field has been set.
func (o *GitConfigurationData) HasProvider() bool {
	if o != nil && o.Provider != nil {
		return true
	}

	return false
}

// SetProvider gets a reference to the given GitProvider and assigns it to the Provider field.
func (o *GitConfigurationData) SetProvider(v GitProvider) {
	o.Provider = &v
}

func (o GitConfigurationData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.GitSecret != nil {
		toSerialize["gitSecret"] = o.GitSecret
	}
	if o.GitCloneUrl != nil {
		toSerialize["gitCloneUrl"] = o.GitCloneUrl
	}
	if o.Provider != nil {
		toSerialize["provider"] = o.Provider
	}
	return json.Marshal(toSerialize)
}

type NullableGitConfigurationData struct {
	value *GitConfigurationData
	isSet bool
}

func (v NullableGitConfigurationData) Get() *GitConfigurationData {
	return v.value
}

func (v *NullableGitConfigurationData) Set(val *GitConfigurationData) {
	v.value = val
	v.isSet = true
}

func (v NullableGitConfigurationData) IsSet() bool {
	return v.isSet
}

func (v *NullableGitConfigurationData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGitConfigurationData(val *GitConfigurationData) *NullableGitConfigurationData {
	return &NullableGitConfigurationData{value: val, isSet: true}
}

func (v NullableGitConfigurationData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGitConfigurationData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


