/*
Subscription Service Endpoints

## Create subscription  Create a new subscription.  ``` curl -v -d '{\\     \"company\": \"My Company\", \\     \"firstName\": \"First\", \\     \"lastName\": \"Last\", \\     \"email\": \"first.last@magnolia-cms.com\", \\     \"password\": \"some1%2Tres\", \\     \"function\": \"CTO\", \\     \"country\": \"Spain\" \\     }' \\ -H \"Content-Type: application/json\" -X POST \"http://localhost:8080/public/subscriptions\" ``` ## Update subscription  Update a new subscription. This is an idempotent operation.  ``` curl -v -d '{\\     \"id\": \"my-company\" \\     }' \\ -H \"Content-Type: application/json\" -X POST \"http://localhost:8080/admin/subscriptions/{subId}\" ``` ## Invite users  Invite a list of users to a subscription.  ## Validate invitation  Validate an invitation to a subscription.  ## Activate user  Activate a user for a subscription. The user needs an invitation to be activated. 

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SubscriptionUpdate struct for SubscriptionUpdate
type SubscriptionUpdate struct {
	Name string `json:"name"`
	Description *string `json:"description,omitempty"`
	Version int32 `json:"version"`
}

// NewSubscriptionUpdate instantiates a new SubscriptionUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionUpdate(name string, version int32) *SubscriptionUpdate {
	this := SubscriptionUpdate{}
	this.Name = name
	this.Version = version
	return &this
}

// NewSubscriptionUpdateWithDefaults instantiates a new SubscriptionUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionUpdateWithDefaults() *SubscriptionUpdate {
	this := SubscriptionUpdate{}
	return &this
}

// GetName returns the Name field value
func (o *SubscriptionUpdate) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SubscriptionUpdate) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SubscriptionUpdate) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SubscriptionUpdate) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionUpdate) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SubscriptionUpdate) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SubscriptionUpdate) SetDescription(v string) {
	o.Description = &v
}

// GetVersion returns the Version field value
func (o *SubscriptionUpdate) GetVersion() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *SubscriptionUpdate) GetVersionOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *SubscriptionUpdate) SetVersion(v int32) {
	o.Version = v
}

func (o SubscriptionUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableSubscriptionUpdate struct {
	value *SubscriptionUpdate
	isSet bool
}

func (v NullableSubscriptionUpdate) Get() *SubscriptionUpdate {
	return v.value
}

func (v *NullableSubscriptionUpdate) Set(val *SubscriptionUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionUpdate(val *SubscriptionUpdate) *NullableSubscriptionUpdate {
	return &NullableSubscriptionUpdate{value: val, isSet: true}
}

func (v NullableSubscriptionUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


