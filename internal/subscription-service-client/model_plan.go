/*
Subscription Service Endpoints

## Create subscription  Create a new subscription.  ``` curl -v -d '{\\     \"company\": \"My Company\", \\     \"firstName\": \"First\", \\     \"lastName\": \"Last\", \\     \"email\": \"first.last@magnolia-cms.com\", \\     \"password\": \"some1%2Tres\", \\     \"function\": \"CTO\", \\     \"country\": \"Spain\" \\     }' \\ -H \"Content-Type: application/json\" -X POST \"http://localhost:8080/public/subscriptions\" ``` ## Update subscription  Update a new subscription. This is an idempotent operation.  ``` curl -v -d '{\\     \"id\": \"my-company\" \\     }' \\ -H \"Content-Type: application/json\" -X POST \"http://localhost:8080/admin/subscriptions/{subId}\" ``` ## Invite users  Invite a list of users to a subscription.  ## Validate invitation  Validate an invitation to a subscription.  ## Activate user  Activate a user for a subscription. The user needs an invitation to be activated. 

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Plan Subscription plan
type Plan struct {
	Id string `json:"id"`
	Name string `json:"name"`
	Creation *int64 `json:"creation,omitempty"`
	Update *int64 `json:"update,omitempty"`
	Active bool `json:"active"`
	DefaultForNewSubscriptions bool `json:"defaultForNewSubscriptions"`
	MetricConstraints []MetricConstraint `json:"metricConstraints,omitempty"`
}

// NewPlan instantiates a new Plan object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlan(id string, name string, active bool, defaultForNewSubscriptions bool) *Plan {
	this := Plan{}
	this.Id = id
	this.Name = name
	this.Active = active
	this.DefaultForNewSubscriptions = defaultForNewSubscriptions
	return &this
}

// NewPlanWithDefaults instantiates a new Plan object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlanWithDefaults() *Plan {
	this := Plan{}
	return &this
}

// GetId returns the Id field value
func (o *Plan) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Plan) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Plan) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *Plan) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Plan) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Plan) SetName(v string) {
	o.Name = v
}

// GetCreation returns the Creation field value if set, zero value otherwise.
func (o *Plan) GetCreation() int64 {
	if o == nil || o.Creation == nil {
		var ret int64
		return ret
	}
	return *o.Creation
}

// GetCreationOk returns a tuple with the Creation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plan) GetCreationOk() (*int64, bool) {
	if o == nil || o.Creation == nil {
		return nil, false
	}
	return o.Creation, true
}

// HasCreation returns a boolean if a field has been set.
func (o *Plan) HasCreation() bool {
	if o != nil && o.Creation != nil {
		return true
	}

	return false
}

// SetCreation gets a reference to the given int64 and assigns it to the Creation field.
func (o *Plan) SetCreation(v int64) {
	o.Creation = &v
}

// GetUpdate returns the Update field value if set, zero value otherwise.
func (o *Plan) GetUpdate() int64 {
	if o == nil || o.Update == nil {
		var ret int64
		return ret
	}
	return *o.Update
}

// GetUpdateOk returns a tuple with the Update field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plan) GetUpdateOk() (*int64, bool) {
	if o == nil || o.Update == nil {
		return nil, false
	}
	return o.Update, true
}

// HasUpdate returns a boolean if a field has been set.
func (o *Plan) HasUpdate() bool {
	if o != nil && o.Update != nil {
		return true
	}

	return false
}

// SetUpdate gets a reference to the given int64 and assigns it to the Update field.
func (o *Plan) SetUpdate(v int64) {
	o.Update = &v
}

// GetActive returns the Active field value
func (o *Plan) GetActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Active
}

// GetActiveOk returns a tuple with the Active field value
// and a boolean to check if the value has been set.
func (o *Plan) GetActiveOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Active, true
}

// SetActive sets field value
func (o *Plan) SetActive(v bool) {
	o.Active = v
}

// GetDefaultForNewSubscriptions returns the DefaultForNewSubscriptions field value
func (o *Plan) GetDefaultForNewSubscriptions() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.DefaultForNewSubscriptions
}

// GetDefaultForNewSubscriptionsOk returns a tuple with the DefaultForNewSubscriptions field value
// and a boolean to check if the value has been set.
func (o *Plan) GetDefaultForNewSubscriptionsOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DefaultForNewSubscriptions, true
}

// SetDefaultForNewSubscriptions sets field value
func (o *Plan) SetDefaultForNewSubscriptions(v bool) {
	o.DefaultForNewSubscriptions = v
}

// GetMetricConstraints returns the MetricConstraints field value if set, zero value otherwise.
func (o *Plan) GetMetricConstraints() []MetricConstraint {
	if o == nil || o.MetricConstraints == nil {
		var ret []MetricConstraint
		return ret
	}
	return o.MetricConstraints
}

// GetMetricConstraintsOk returns a tuple with the MetricConstraints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plan) GetMetricConstraintsOk() ([]MetricConstraint, bool) {
	if o == nil || o.MetricConstraints == nil {
		return nil, false
	}
	return o.MetricConstraints, true
}

// HasMetricConstraints returns a boolean if a field has been set.
func (o *Plan) HasMetricConstraints() bool {
	if o != nil && o.MetricConstraints != nil {
		return true
	}

	return false
}

// SetMetricConstraints gets a reference to the given []MetricConstraint and assigns it to the MetricConstraints field.
func (o *Plan) SetMetricConstraints(v []MetricConstraint) {
	o.MetricConstraints = v
}

func (o Plan) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Creation != nil {
		toSerialize["creation"] = o.Creation
	}
	if o.Update != nil {
		toSerialize["update"] = o.Update
	}
	if true {
		toSerialize["active"] = o.Active
	}
	if true {
		toSerialize["defaultForNewSubscriptions"] = o.DefaultForNewSubscriptions
	}
	if o.MetricConstraints != nil {
		toSerialize["metricConstraints"] = o.MetricConstraints
	}
	return json.Marshal(toSerialize)
}

type NullablePlan struct {
	value *Plan
	isSet bool
}

func (v NullablePlan) Get() *Plan {
	return v.value
}

func (v *NullablePlan) Set(val *Plan) {
	v.value = val
	v.isSet = true
}

func (v NullablePlan) IsSet() bool {
	return v.isSet
}

func (v *NullablePlan) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlan(val *Plan) *NullablePlan {
	return &NullablePlan{value: val, isSet: true}
}

func (v NullablePlan) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlan) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


